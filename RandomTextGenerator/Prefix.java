package pa4;

/**
 ######################################################
 #################### by Shu Liu ######################
 ############ shutel at hotmail dot com ###############
 ################### 04/12/2016 #######################
 ########### GenText project @ USC CSCI455 ############
 ######################################################
 */

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

/**
 * This Class is in charge of generating the successors list from all prefixes and put prefix 
 * its successors list by pair into a hashMap
 */

public class Prefix {
	private ArrayList<String> prefix;
	private Map<String, ArrayList<String>> prefixMap;
	private int prefixLength;
	private ArrayList<String> origWord;
	private boolean debug;
	
	/** Constructor
	 * @param prefixLength the length of prefix
	 * @param origWord words in the original input file
	 * @param debug check bugs with the debug model
	 */
	
	public Prefix(int prefixLength, ArrayList<String> origWord, boolean debug){
		this.prefix = new ArrayList<String>();
		this.prefixMap = new HashMap<String, ArrayList<String>>();
		this.prefixLength = prefixLength;
		this.origWord = origWord;
		this.debug = debug;
	}
	
	/**
	 * Convert prefix to one space-separated string
	 */
	public String toString(){
		String prefixString = "";
		for(int i=0; i<prefix.size(); i++){
			prefixString = prefixString + prefix.get(i) + " ";
		}
		return prefixString;
	}
	
	/**
	 * Initial the map with all possible prefixes
	 * @return map with all prefixes and the word after it stored in
	 */
	
	public Map<String, ArrayList<String>> prefixMapGen(){
		for(int i=0; i<origWord.size()-prefixLength; i++){
			String keyString = "";
			for(int j=0; j<prefixLength; j++){
		 		keyString = keyString + origWord.get(i+j) + " ";
			}
			//add and update the entries in the map
			if(!prefixMap.containsKey(keyString)){
				prefixMap.put(keyString, new ArrayList<String>());
			}
			if(prefixMap.containsKey(keyString)){
				prefixMap.get(keyString).add(origWord.get(i+prefixLength));		
			}
			}
		return prefixMap;
	}
	
	/**
	 * Produce the successor list with the current prefix
	 * @return successor list generated by the prefix
	 */
	public ArrayList<String> getSuccessorList(){
		ArrayList<String> successors = new ArrayList<String>();
		successors = prefixMap.get(toString());
		return successors;
	}
	
	/**
	 * Update the prefix with the newest generated word
	 * @param nextWord the next word generated form current prefix
	 */
	
	public void shiftPrefix(String nextWord){
		prefix.remove(0);
		prefix.add(nextWord);
	}
	
	/**
	 * Generate a new start prefix
	 */
	
	public void initialPre(){
		int randIndex;
		Random generator;
		if(!debug){
			generator = new Random();
		}
		else{
			generator = new Random(1);
		}
		prefix = new ArrayList<String>();
		randIndex = generator.nextInt(origWord.size() - prefixLength);
		for(int i=0; i<prefixLength; i++ ){
		prefix.add(origWord.get(randIndex + i));
		}
		//return prefix;
	}
	

}
